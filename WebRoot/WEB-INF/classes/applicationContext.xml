<?xml version="1.0" encoding="UTF-8"?> 
<beans xmlns="http://www.springframework.org/schema/beans" 
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:p="http://www.springframework.org/schema/p"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
       xmlns:aop="http://www.springframework.org/schema/aop" 
       xmlns:tx="http://www.springframework.org/schema/tx" 
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
                           http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-3.0.xsd
                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd 
                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
	<!-- ========================= RESOURCE DEFINITIONS ========================= -->

    
    
    
	<!-- Configurer that replaces ${...} placeholders with values from a properties file -->
	<!-- (in this case, JDBC-related settings for the dataSource definition below) -->
	<context:property-placeholder location="classpath:jdbc.properties"/>

	<!--
		Uses Apache Commons DBCP for connection pooling. See Commons DBCP documentation
		for the required JAR files. Alternatively you can use another connection pool
		such as C3P0, similarly configured using Spring.
	-->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"
			p:driverClassName="${jdbc.driverClassName}" p:url="${jdbc.url}" p:username="${jdbc.username}"
			p:password="${jdbc.password}"/>


	<!-- Hibernate SessionFactory -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />	
		
		<property name="mappingLocations">  
            <list>  
                <value>classpath:cn/ts987/oa/domain/*.hbm.xml</value>
            </list>  
        </property>  
			
		 
			
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.generate_statistics">${hibernate.generate_statistics}</prop>
				<prop key="cache.use_query_cache">true</prop>
				<prop key="cache.use_second_level_cache">true</prop>
				<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.EhCacheRegionFactory</prop>
				<prop key="javax.persistence.validation.mode">none</prop>	
				<prop key="connection.autocommit">false</prop>	 
				<!--  
				<prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop>
				<prop key="hibernate.current_session_context_class">thread</prop>
				-->
			</props>
		</property>
		<!-- 
		<property name="entityInterceptor" ref ="AuditUserInterceptor"/>
		 -->
		
	</bean>
	
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"/>
	
	<!-- 
    <bean id="AuditUserInterceptor" class="com.ocsoft.core.hibernate.AuditUserInterceptor"/>
	 -->
<!-- ========================= TRANSACTION ========================= -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">  
        <property name="sessionFactory" ref="sessionFactory" />  
    </bean>  
    
	<tx:advice id="txAdvice" transaction-manager="transactionManager">  
        <tx:attributes>  
        <!-- 
            <tx:method name="*" propagation="REQUIRED"/>  
         -->
         	<tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="get*" propagation="REQUIRED"  read-only="true"/>
            <tx:method name="find*" propagation="REQUIRED"  read-only="true"/>
 			<tx:method name="delete*" propagation="REQUIRED"/>
 			<tx:method name="update*" propagation="REQUIRED"/>
 			<tx:method name="save*" propagation="REQUIRED"/>
 			<tx:method name="search*" propagation="REQUIRED"  read-only="true"/>
 			<tx:method name="test*" propagation="REQUIRED"/>
 			<tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>  
    </tx:advice>  
  
    <!-- Activiti 5.1.4 start-->
    
    <bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration">
    	<property name="dataSource" ref="dataSource" />    
    	<property name="transactionManager" ref="transactionManager" />    
    	<property name="databaseSchemaUpdate" value="true" />    
    	<property name="jobExecutorActivate" value="false" />
    </bean>
    <bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">    
    	<property name="processEngineConfiguration" ref="processEngineConfiguration" />  
    </bean>
    
    <bean id="repositoryService" factory-bean="processEngine" factory-method="getRepositoryService" />  
    <bean id="runtimeService" factory-bean="processEngine" factory-method="getRuntimeService" />  
    <bean id="historyService" factory-bean="processEngine" factory-method="getHistoryService" />  
    <bean id="identityService" factory-bean="processEngine" factory-method="getIdentityService" />
    <bean id="taskService" factory-bean="processEngine" factory-method="getTaskService" />  
    <bean id="formService" factory-bean="processEngine" factory-method="getFormService" /> 
    <bean id="managementService" factory-bean="processEngine" factory-method="getManagementService" />
    
    
    <!-- Activiti 5.1.4 end-->
  <!--  
    <aop:config>  
        <aop:pointcut id="persistOperation" expression="execution(* com.ocsoft.core.service.impl.*.*(..))" />  
        <aop:advisor advice-ref="txAdvice" pointcut-ref="persistOperation" />  
    </aop:config> 
    -->

	

	<!-- Transaction manager for a single Hibernate SessionFactory (alternative to JTA) 
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager"
			p:sessionFactory-ref="sessionFactory"/>
	-->

	<!-- Transaction manager that delegates to JTA (for a transactional JNDI DataSource) -->
	<!--
	<bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager"/>
	-->


	<!-- ========================= BUSINESS OBJECT DEFINITIONS ========================= -->

	<!--
		Activates various annotations to be detected in bean classes:
		Spring's @Required and @Autowired, as well as JSR 250's @Resource.
	-->
	<context:annotation-config/>

	<!--
		Instruct Spring to perform declarative transaction management
		automatically on annotated classes.
	-->
	

	<!--
		Exporter that exposes the Hibernate statistics service via JMX. Autodetects the
		service MBean, using its bean name as JMX object name.
	-->
	<context:mbean-export/>

	<!-- PetClinic's central data access object: Hibernate implementation
	<bean id="clinic" class="org.springframework.samples.petclinic.hibernate.HibernateClinic"/>
	 -->

	<!-- Hibernate's JMX statistics service 
	<bean name="petclinic:type=HibernateStatistics" class="org.hibernate.jmx.StatisticsService" autowire="byName"/>
	-->
	
	
</beans>
